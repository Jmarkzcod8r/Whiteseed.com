{"version":3,"sources":["Components/DankMemes.js","Components/Features.js","Components/Pricing.js","Components/MoreDeets.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["dank","className","Feature","Pricing","MoreDeets","NavBar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","to","Link","title","Item","Divider","eventKey","App","path","component","Features","DankMemes","class","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAUeA,G,YARF,WACT,OACI,yBAAKC,UAAU,OACX,6CCKGC,EARC,WACZ,OACI,yBAAKD,UAAU,OACX,+CCKGE,EARC,WACZ,OACI,yBAAKF,UAAU,OACX,+CCKGG,EARG,WACd,OACI,yBAAKH,UAAU,OACX,iD,gCCwDGI,EArDA,WACX,OACI,yBAAKJ,UAAU,OACnB,kBAAC,IAAD,CAAuBK,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACxE,kBAAC,IAAsBC,MAAvB,CAA6BC,KAAK,SAAlC,aACA,kBAAC,IAAsBC,OAAvB,CAA8BC,gBAAc,0BAC5C,kBAAC,IAAsBC,SAAvB,CAAgCC,GAAG,yBAEjC,kBAAC,IAAD,CAAoBd,UAAU,YAK9B,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAMe,GAAG,aACT,kBAAC,IAAmBC,KAApB,CAAyBN,KAAK,aAA9B,SAGA,kBAAC,IAAD,CAAMK,GAAG,YACT,kBAAC,IAAmBC,KAApB,CAAyBN,KAAK,YAA9B,UAGE,kBAAC,IAAD,CAA4BO,MAAM,WAAWH,GAAG,2BAC9C,kBAAC,IAA2BI,KAA5B,CAAiCR,KAAK,eAAtC,UACA,kBAAC,IAA2BQ,KAA5B,CAAiCR,KAAK,eAAtC,kBACA,kBAAC,IAA2BQ,KAA5B,CAAiCR,KAAK,eAAtC,aACA,kBAAC,IAA2BS,QAA5B,MACA,kBAAC,IAA2BD,KAA5B,CAAiCR,KAAK,eAAtC,mBAIJ,kBAAC,IAAD,CAAMK,GAAG,UACT,kBAAC,IAAmBC,KAApB,CAAyBN,KAAK,UAA9B,YAGA,kBAAC,IAAD,CAAMK,GAAG,cACP,kBAAC,IAAmBC,KAApB,CAAyBI,SAAU,EAAGV,KAAK,UAA3C,e,OCsBSW,MAlDf,WACE,OACE,yBAAKrB,UAAU,OACX,kBAAC,IAAD,KACA,kBAAC,EAAD,MAKA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,KAAK,YAAYC,UAAWC,GAC/B,kBAACA,EAAD,OAEJ,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWrB,GAChC,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOoB,KAAK,SAASC,UAAWpB,GAC9B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOmB,KAAK,aAAaC,UAAWE,GAClC,kBAACA,EAAD,SAKR,yBAAKC,MAAM,kBACP,yBAAKA,MAAM,SAAQC,IAAI,gFAG3B,yBAAKD,MAAM,SAAX,eAEQ,qCAGA,qCAGA,uCC1CQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.864c8a19.chunk.js","sourcesContent":["import React from 'react';\n\nconst dank = () => {\n    return(\n        <div className=\"App\">\n            <h1>DANK HOURS</h1>\n        </div>\n    )\n}\n\nexport default dank;","import React from 'react';\n\nconst Feature = () => {\n    return(\n        <div className=\"App\">\n            <h1>Feature HOURS</h1>\n        </div>\n    )\n}\n\nexport default Feature;","import React from 'react';\n\nconst Pricing = () => {\n    return(\n        <div className=\"App\">\n            <h1>Pricing HOURS</h1>\n        </div>\n    )\n}\n\nexport default Pricing;","import React from 'react';\n\nconst MoreDeets = () => {\n    return(\n        <div className=\"App\">\n            <h1>MoreDeets HOURS</h1>\n        </div>\n    )\n}\n\nexport default MoreDeets;","import React from 'react';\nimport * as ReactBootStrap from \"react-bootstrap\";\nimport {\n    BrowserRouter as Router,\n    Link,\n    Outlet,\n  } from \"react-router-dom\";\n\nconst NavBar = () => {\n    return(\n        <div className=\"App\">\n    <ReactBootStrap.Navbar collapseOnSelect expand=\"xl\" bg=\"info\" variant=\"dark\">\n  <ReactBootStrap.Navbar.Brand href=\"#home\">WhiteSeed</ReactBootStrap.Navbar.Brand>\n  <ReactBootStrap.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <ReactBootStrap.Navbar.Collapse id=\"responsive-navbar-nav\">\n\n    <ReactBootStrap.Nav className=\"mr-auto\"> \n\n   \n    </ReactBootStrap.Nav>\n    \n    <ReactBootStrap.Nav>\n\n    <Link to=\"/features\">\n    <ReactBootStrap.Nav.Link href=\"#features\">Home</ReactBootStrap.Nav.Link>\n    </Link>\n\n    <Link to=\"/pricing\">\n    <ReactBootStrap.Nav.Link href=\"#pricing\">About</ReactBootStrap.Nav.Link>\n    </Link>\n\n      <ReactBootStrap.NavDropdown title=\"Features\" id=\"collasible-nav-dropdown\">\n        <ReactBootStrap.NavDropdown.Item href=\"#action/3.1\">Action</ReactBootStrap.NavDropdown.Item>\n        <ReactBootStrap.NavDropdown.Item href=\"#action/3.2\">Another action</ReactBootStrap.NavDropdown.Item>\n        <ReactBootStrap.NavDropdown.Item href=\"#action/3.3\">Something</ReactBootStrap.NavDropdown.Item>\n        <ReactBootStrap.NavDropdown.Divider />\n        <ReactBootStrap.NavDropdown.Item href=\"#action/3.4\">Separated link</ReactBootStrap.NavDropdown.Item>\n      </ReactBootStrap.NavDropdown>\n\n\n    <Link to=\"/deets\">\n    <ReactBootStrap.Nav.Link href=\"#deets\">Contact</ReactBootStrap.Nav.Link>\n    </Link>\n\n    <Link to=\"/dankmemes\">\n      <ReactBootStrap.Nav.Link eventKey={2} href=\"#memes\">\n        Login\n      </ReactBootStrap.Nav.Link>\n    </Link>\n\n    </ReactBootStrap.Nav>\n    </ReactBootStrap.Navbar.Collapse>\n    </ReactBootStrap.Navbar>\n     \n    \n\n\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport './App.scss';\nimport * as ReactBootStrap from \"react-bootstrap\";\nimport DankMemes from \"./Components/DankMemes\";\nimport Features from \"./Components/Features\";\nimport Pricing from \"./Components/Pricing\";\nimport MoreDeets from \"./Components/MoreDeets\";\nimport NavBar from \"./Components/Navbar\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router>\n        <NavBar />\n \n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/features\" component={Features}>\n              <Features />\n          </Route>\n          <Route path=\"/pricing\" component={Pricing}>\n            <Pricing />\n          </Route>\n          <Route path=\"/deets\" component={MoreDeets}>\n            <MoreDeets />\n          </Route>\n          <Route path=\"/dankmemes\" component={DankMemes}>\n            <DankMemes />\n          </Route>\n        </Switch>\n    </Router>\n\n    <div class=\"Background_pic\">\n        <img class=\"bg_pic\"src=\"https://cdn.pixabay.com/photo/2017/09/04/09/38/crosses-2713356_960_720.jpg\"></img>\n      </div>\n  \n    <div class=\"cards\">\n        sad,a,s &nsb\n            <div>\n              asda\n            </div>\n            <div>\n              asda\n            </div>\n            <div>\n              asd\n            </div>\n     \n     \n     \n     \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}